<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Video Learning Tool</title>
    <style>
        :root {
            --primary-color: #4a6ee0;
            --secondary-color: #f5f7ff;
            --accent-color: #ff6b6b;
            --success-color: #2ecc71;
            --text-color: #333;
            --light-gray: #e9ecef;
            --dark-gray: #6c757d;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f8f9fa;
            color: var(--text-color);
            line-height: 1.6;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .main-content {
            display: grid;
            grid-template-columns: 1fr;
            gap: 20px;
        }
        
        .video-section {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .video-container {
            position: relative;
            width: 100%;
            padding-bottom: 56.25%;
            background-color: #000;
        }
        
        .video-container video {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: contain;
        }
        
        .upload-area {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background-color: rgba(0,0,0,0.7);
            color: white;
            z-index: 10;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        .upload-area:hover {
            background-color: rgba(0,0,0,0.8);
        }
        
        .upload-icon {
            font-size: 48px;
            margin-bottom: 15px;
        }
        
        .upload-text {
            font-size: 18px;
            margin-bottom: 10px;
        }
        
        .upload-subtext {
            font-size: 14px;
            opacity: 0.8;
        }
        
        .video-loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            text-align: center;
            z-index: 5;
        }
        
        .video-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 15px;
            background-color: var(--secondary-color);
            border-top: 1px solid var(--light-gray);
        }
        
        .control-group {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .progress-container {
            flex-grow: 1;
            display: flex;
            align-items: center;
            margin: 0 15px;
        }
        
        .progress-bar {
            flex-grow: 1;
            height: 6px;
            background-color: var(--light-gray);
            border-radius: 3px;
            position: relative;
            cursor: pointer;
        }
        
        .progress {
            height: 100%;
            background-color: var(--primary-color);
            border-radius: 3px;
            width: 0%;
        }
        
        .markers {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
        
        .marker {
            position: absolute;
            width: 12px;
            height: 12px;
            background-color: var(--accent-color);
            border-radius: 50%;
            transform: translateX(-50%);
            cursor: pointer;
            z-index: 2;
        }
        
        .marker:hover::after {
            content: attr(data-title);
            position: absolute;
            bottom: 15px;
            left: 50%;
            transform: translateX(-50%);
            background-color: rgba(0,0,0,0.8);
            color: white;
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 12px;
            white-space: nowrap;
            z-index: 3;
        }
        
        .btn {
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }
        
        .btn i {
            margin-right: 5px;
        }
        
        .btn-primary {
            background-color: var(--primary-color);
            color: white;
        }
        
        .btn-primary:hover {
            background-color: #3a5bc7;
            transform: translateY(-2px);
        }
        
        .btn-secondary {
            background-color: var(--light-gray);
            color: var(--text-color);
        }
        
        .btn-secondary:hover {
            background-color: #d8dbe0;
        }
        
        .btn-success {
            background-color: var(--success-color);
            color: white;
        }
        
        .btn-success:hover {
            background-color: #27ae60;
        }
        
        .btn-danger {
            background-color: var(--accent-color);
            color: white;
        }
        
        .btn-danger:hover {
            background-color: #e05555;
        }
        
        .btn-sm {
            padding: 6px 10px;
            font-size: 12px;
        }
        
        .question-popup {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 80%;
            max-width: 500px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            padding: 20px;
            z-index: 100;
            display: none;
        }
        
        .overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.7);
            z-index: 99;
            display: none;
        }
        
        .question-popup.active, .overlay.active {
            display: block;
        }
        
        .popup-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid var(--light-gray);
        }
        
        .popup-title {
            font-size: 18px;
            font-weight: 600;
            color: var(--primary-color);
        }
        
        .floating-controls {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 50;
            display: flex;
            gap: 10px;
        }
        
        .settings-panel {
            position: fixed;
            top: 0;
            right: -400px;
            width: 400px;
            height: 100vh;
            background-color: white;
            box-shadow: -5px 0 15px rgba(0,0,0,0.1);
            padding: 20px;
            overflow-y: auto;
            transition: right 0.3s ease;
            z-index: 100;
        }
        
        .settings-panel.active {
            right: 0;
        }
        
        .settings-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid var(--light-gray);
        }
        
        .settings-title {
            font-size: 20px;
            font-weight: 600;
            color: var(--primary-color);
        }
        
        .close-settings {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: var(--dark-gray);
        }
        
        .question-form {
            margin-bottom: 20px;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }
        
        input, textarea, select {
            width: 100%;
            padding: 10px;
            border: 1px solid var(--light-gray);
            border-radius: 4px;
            font-size: 14px;
        }
        
        textarea {
            min-height: 100px;
            resize: vertical;
        }
        
        .option-row {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }
        
        .option-row input {
            flex-grow: 1;
            margin-right: 10px;
        }
        
        .questions-timeline {
            margin-top: 20px;
            padding: 20px;
            background-color: var(--secondary-color);
            border-radius: 8px;
        }
        
        .timeline-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid var(--light-gray);
        }
        
        .timeline-title {
            font-size: 18px;
            font-weight: 600;
            color: var(--primary-color);
        }
        
        .timeline-item {
            padding: 15px;
            border: 1px solid var(--light-gray);
            border-radius: 4px;
            margin-bottom: 10px;
            background-color: white;
            transition: transform 0.2s;
        }
        
        .timeline-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .timeline-item-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        
        .timeline-item-time {
            font-size: 12px;
            color: var(--dark-gray);
            background-color: var(--secondary-color);
            padding: 3px 8px;
            border-radius: 12px;
        }
        
        .timeline-item-text {
            margin-bottom: 10px;
        }
        
        .timeline-item-options {
            margin-left: 15px;
        }
        
        .timeline-item-actions {
            display: flex;
            gap: 5px;
            margin-top: 10px;
        }
        
        .stats {
            display: flex;
            gap: 15px;
            margin-top: 20px;
            padding-top: 15px;
            border-top: 1px solid var(--light-gray);
        }
        
        .stat-item {
            text-align: center;
            flex: 1;
        }
        
        .stat-value {
            font-size: 24px;
            font-weight: bold;
            color: var(--primary-color);
        }
        
        .stat-label {
            font-size: 12px;
            color: var(--dark-gray);
        }
        
        .no-questions {
            text-align: center;
            padding: 30px;
            color: var(--dark-gray);
        }
        
        .no-questions i {
            font-size: 48px;
            margin-bottom: 15px;
            opacity: 0.5;
        }
        
        .finish-button-container {
            text-align: center;
            margin-top: 20px;
            padding-top: 15px;
            border-top: 1px solid var(--light-gray);
        }
        
        .add-more-container {
            text-align: center;
            margin-top: 20px;
            padding: 15px;
            background-color: var(--secondary-color);
            border-radius: 8px;
            display: none;
        }

        .answered-question {
            opacity: 0.6;
            background-color: #f8f9fa;
        }
        
        @media (max-width: 768px) {
            .video-controls {
                flex-wrap: wrap;
            }
            
            .progress-container {
                order: 3;
                width: 100%;
                margin: 10px 0 0;
            }
            
            .floating-controls {
                flex-direction: column;
            }
            
            .settings-panel {
                width: 100%;
                right: -100%;
            }
        }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>
    <div class="floating-controls">
        <button class="btn btn-primary" id="settingsBtn">
            <i class="fas fa-cog"></i> Settings
        </button>
        <button class="btn btn-success" id="saveBtn">
            <i class="fas fa-save"></i> Save Project
        </button>
        <button class="btn btn-secondary" id="loadBtn">
            <i class="fas fa-folder-open"></i> Load Project
        </button>
        <input type="file" id="loadProjectFile" accept=".json,.zip" style="display: none;">
    </div>
    
    <div class="container">
        <div class="main-content">
            <div class="video-section">
                <div class="video-container">
                    <video id="videoPlayer" controls playsinline>
                        Your browser does not support the video tag.
                    </video>
                    <div class="upload-area" id="uploadArea">
                        <i class="fas fa-cloud-upload-alt upload-icon"></i>
                        <div class="upload-text">Upload Video File</div>
                        <div class="upload-subtext">Supports MP4, WebM, OGV formats</div>
                        <input type="file" id="videoUpload" accept="video/*" style="display: none;">
                    </div>
                    <div class="video-loading" id="videoLoading" style="display: none;">
                        <i class="fas fa-spinner fa-spin fa-2x"></i>
                        <p>Loading video...</p>
                    </div>
                </div>
                <div class="video-controls">
                    <div class="control-group">
                        <button class="btn btn-secondary" id="playPauseBtn">
                            <i class="fas fa-play"></i>
                        </button>
                        <span id="timeDisplay">0:00 / 0:00</span>
                    </div>
                    <div class="progress-container">
                        <div class="progress-bar" id="progressBar">
                            <div class="progress" id="progress"></div>
                            <div class="markers" id="markers"></div>
                        </div>
                    </div>
                    <div class="control-group">
                        <button class="btn btn-secondary" id="volumeBtn">
                            <i class="fas fa-volume-up"></i>
                        </button>
                        <button class="btn btn-secondary" id="fullscreenBtn">
                            <i class="fas fa-expand"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Settings Panel -->
    <div class="settings-panel" id="settingsPanel">
        <div class="settings-header">
            <div class="settings-title">
                <i class="fas fa-cog"></i> Settings
            </div>
            <button class="close-settings" id="closeSettingsBtn">
                <i class="fas fa-times"></i>
            </button>
        </div>
        
        <div class="question-form" id="questionForm">
            <h3><i class="fas fa-question-circle"></i> Add Interactive Question</h3>
            <div class="form-group">
                <label for="questionTime">Timestamp (minutes:seconds)</label>
                <input type="text" id="questionTime" placeholder="e.g. 1:30" value="0:00">
            </div>
            <div class="form-group">
                <label for="questionType">Question Type</label>
                <select id="questionType">
                    <option value="multiple">Multiple Choice</option>
                    <option value="open">Open-ended Question</option>
                    <option value="note">Note</option>
                </select>
            </div>
            <div class="form-group">
                <label for="questionText">Question Content</label>
                <textarea id="questionText" placeholder="Enter your question..."></textarea>
            </div>
            <div id="optionsContainer" class="form-group">
                <label>Options</label>
                <div class="option-row">
                    <input type="text" placeholder="Option 1">
                    <input type="checkbox" class="correct-option">
                </div>
                <div class="option-row">
                    <input type="text" placeholder="Option 2">
                    <input type="checkbox" class="correct-option">
                </div>
                <button class="btn btn-secondary" id="addOptionBtn">
                    <i class="fas fa-plus"></i> Add Option
                </button>
            </div>
            <button class="btn btn-primary" id="addQuestionBtn">
                <i class="fas fa-plus-circle"></i> Add Question
            </button>
            
            <div class="finish-button-container">
                <button class="btn btn-success" id="finishQuestionsBtn">
                    <i class="fas fa-check"></i> Finish Adding Questions
                </button>
            </div>
        </div>
        
        <div class="questions-timeline" id="questionsTimeline">
            <div class="timeline-header">
                <div class="timeline-title">
                    <i class="fas fa-list"></i> Video Questions Timeline
                </div>
                <div class="timeline-stats">
                    <span id="timelineQuestionCount">0</span> Questions
                </div>
            </div>
            <div id="timelineQuestionsList">
                <div class="no-questions" id="noQuestions">
                    <i class="fas fa-question-circle"></i>
                    <p>No questions added yet</p>
                    <p>Use the form above to add questions</p>
                </div>
            </div>
        </div>
        
        <div class="add-more-container" id="addMoreContainer">
            <p>Want to add more questions?</p>
            <button class="btn btn-primary" id="addMoreQuestionsBtn">
                <i class="fas fa-plus"></i> Add More Questions
            </button>
        </div>
        
        <div class="stats">
            <div class="stat-item">
                <div class="stat-value" id="totalQuestions">0</div>
                <div class="stat-label">Total Questions</div>
            </div>
            <div class="stat-item">
                <div class="stat-value" id="videoDuration">0:00</div>
                <div class="stat-label">Video Duration</div>
            </div>
        </div>
    </div>
    
    <div class="overlay" id="overlay"></div>
    <div class="question-popup" id="questionPopup">
        <div class="popup-header">
            <div class="popup-title">Answer Question</div>
            <div class="question-time" id="popupTime">0:00</div>
        </div>
        <h3 id="popupQuestionText">Question will appear here</h3>
        <div id="popupOptions"></div>
        <div class="form-group" id="openAnswerContainer" style="display: none;">
            <textarea id="openAnswer" placeholder="Enter your answer..."></textarea>
        </div>
        <div style="text-align: right; margin-top: 15px;">
            <button class="btn btn-primary" id="submitAnswerBtn">
                <i class="fas fa-check"></i> Submit Answer
            </button>
            <button class="btn btn-secondary" id="continueVideoBtn" style="margin-left: 10px;">
                <i class="fas fa-play"></i> Continue Video
            </button>
        </div>
    </div>

    <script>
        // DOM elements
        const videoPlayer = document.getElementById('videoPlayer');
        const uploadArea = document.getElementById('uploadArea');
        const videoUpload = document.getElementById('videoUpload');
        const videoLoading = document.getElementById('videoLoading');
        const progressBar = document.getElementById('progressBar');
        const progress = document.getElementById('progress');
        const timeDisplay = document.getElementById('timeDisplay');
        const markers = document.getElementById('markers');
        const playPauseBtn = document.getElementById('playPauseBtn');
        const volumeBtn = document.getElementById('volumeBtn');
        const fullscreenBtn = document.getElementById('fullscreenBtn');
        const questionTime = document.getElementById('questionTime');
        const questionType = document.getElementById('questionType');
        const questionText = document.getElementById('questionText');
        const optionsContainer = document.getElementById('optionsContainer');
        const addOptionBtn = document.getElementById('addOptionBtn');
        const addQuestionBtn = document.getElementById('addQuestionBtn');
        const finishQuestionsBtn = document.getElementById('finishQuestionsBtn');
        const addMoreQuestionsBtn = document.getElementById('addMoreQuestionsBtn');
        const addMoreContainer = document.getElementById('addMoreContainer');
        const questionForm = document.getElementById('questionForm');
        const questionsTimeline = document.getElementById('questionsTimeline');
        const timelineQuestionsList = document.getElementById('timelineQuestionsList');
        const noQuestions = document.getElementById('noQuestions');
        const timelineQuestionCount = document.getElementById('timelineQuestionCount');
        const overlay = document.getElementById('overlay');
        const questionPopup = document.getElementById('questionPopup');
        const popupQuestionText = document.getElementById('popupQuestionText');
        const popupTime = document.getElementById('popupTime');
        const popupOptions = document.getElementById('popupOptions');
        const openAnswerContainer = document.getElementById('openAnswerContainer');
        const openAnswer = document.getElementById('openAnswer');
        const submitAnswerBtn = document.getElementById('submitAnswerBtn');
        const continueVideoBtn = document.getElementById('continueVideoBtn');
        const saveBtn = document.getElementById('saveBtn');
        const loadBtn = document.getElementById('loadBtn');
        const loadProjectFile = document.getElementById('loadProjectFile');
        const settingsBtn = document.getElementById('settingsBtn');
        const settingsPanel = document.getElementById('settingsPanel');
        const closeSettingsBtn = document.getElementById('closeSettingsBtn');
        const totalQuestions = document.getElementById('totalQuestions');
        const videoDuration = document.getElementById('videoDuration');
        
        // Global variables
        let questions = [];
        let currentQuestion = null;
        let isMuted = false;
        let currentVideoFile = null;
        let questionCheckEnabled = true;
        let lastTriggeredQuestionId = null;
        let isVideoReady = false;
        let questionCheckInterval = null;

        // 初始化问题检测系统（每50ms检查一次）
        function initQuestionDetection() {
            console.log('🔧 Initializing question detection system...');
            
            if (questionCheckInterval) {
                clearInterval(questionCheckInterval);
                questionCheckInterval = null;
            }
            
            questionCheckInterval = setInterval(() => {
                if (questionCheckEnabled && !videoPlayer.paused && !currentQuestion && isVideoReady && videoPlayer.duration) {
                    checkForQuestions();
                }
            }, 50); // 提高精度
            
            console.log('✅ Question detection system started.');
        }

        // 检查当前时间是否有问题需要显示
        function checkForQuestions() {
            if (!videoPlayer.duration || videoPlayer.duration === 0) return;
            
            const currentTime = videoPlayer.currentTime;
            const questionToShow = findQuestionToShow(currentTime);
            
            if (questionToShow) {
                console.log(`🎯 QUESTION DETECTED at ${currentTime.toFixed(2)}s: "${questionToShow.text.substring(0, 50)}..."`);
                triggerQuestion(questionToShow);
            }
        }

        // 查找应在当前时间显示的问题
        function findQuestionToShow(currentTime) {
            const unansweredQuestions = questions.filter(q => !q.answered && q.id !== lastTriggeredQuestionId);
            if (unansweredQuestions.length === 0) return null;

            unansweredQuestions.sort((a, b) => a.time - b.time);

            for (const question of unansweredQuestions) {
                const timeDiff = Math.abs(currentTime - question.time);
                if (timeDiff <= 2.0 && currentTime >= question.time - 0.5) {
                    return question;
                }
            }
            return null;
        }

        // 触发问题弹窗
        function triggerQuestion(question) {
            if (!question || question.answered) return;
            
            console.log(`🛑 PAUSING VIDEO and showing question`);
            videoPlayer.pause();
            lastTriggeredQuestionId = question.id;
            showQuestion(question);
            questionCheckEnabled = false;
        }

        // 初始化所有按钮事件监听器
        function initButtonListeners() {
            uploadArea.addEventListener('click', () => videoUpload.click());
            videoUpload.addEventListener('change', handleVideoUpload);
            
            settingsBtn.addEventListener('click', openSettings);
            closeSettingsBtn.addEventListener('click', closeSettings);
            
            saveBtn.addEventListener('click', saveProject);
            loadBtn.addEventListener('click', () => loadProjectFile.click());
            loadProjectFile.addEventListener('change', loadProject);
            
            playPauseBtn.addEventListener('click', togglePlayPause);
            volumeBtn.addEventListener('click', toggleMute);
            fullscreenBtn.addEventListener('click', toggleFullscreen);
            progressBar.addEventListener('click', seek);
            
            addOptionBtn.addEventListener('click', addOption);
            addQuestionBtn.addEventListener('click', addQuestion);
            finishQuestionsBtn.addEventListener('click', finishAddingQuestions);
            addMoreQuestionsBtn.addEventListener('click', addMoreQuestions);
            
            questionType.addEventListener('change', toggleOptions);
            
            submitAnswerBtn.addEventListener('click', submitAnswer);
            continueVideoBtn.addEventListener('click', continueVideo);
        }

        // 初始化视频播放器事件
        function initVideoPlayer() {
            videoPlayer.addEventListener('loadeddata', () => {
                console.log('Video loaded');
                videoLoading.style.display = 'none';
            });

            videoPlayer.addEventListener('waiting', () => {
                console.log('Video waiting for data');
                videoLoading.style.display = 'block';
            });

            videoPlayer.addEventListener('playing', () => {
                console.log('Video playing');
                videoLoading.style.display = 'none';
            });

            // 关键：每次视频元数据加载完成时初始化问题检测
            videoPlayer.addEventListener('loadedmetadata', () => {
                console.log('Video metadata loaded, duration:', videoPlayer.duration);
                isVideoReady = true;
                videoLoading.style.display = 'none';
                updateTimeDisplay();
                updateStats();
                initQuestionDetection(); // ✅ 重新启动检测
            });

            videoPlayer.addEventListener('timeupdate', updateProgress);

            videoPlayer.addEventListener('play', () => {
                playPauseBtn.innerHTML = '<i class="fas fa-pause"></i>';
                if (!questionCheckEnabled && !currentQuestion) {
                    questionCheckEnabled = true;
                }
            });
            
            videoPlayer.addEventListener('pause', () => {
                playPauseBtn.innerHTML = '<i class="fas fa-play"></i>';
            });
            
            videoPlayer.addEventListener('ended', () => {
                playPauseBtn.innerHTML = '<i class="fas fa-play"></i>';
            });
        }

        // 主初始化函数
        function init() {
            initVideoPlayer();
            initButtonListeners();
            toggleOptions();
            updateStats();
        }
        
        function openSettings() {
            settingsPanel.classList.add('active');
        }
        
        function closeSettings() {
            settingsPanel.classList.remove('active');
        }
        
        function handleVideoUpload(e) {
            const file = e.target.files[0];
            if (!file) return;
            if (!file.type.startsWith('video/')) {
                alert('Please upload a video file!');
                return;
            }
            
            videoLoading.style.display = 'block';
            uploadArea.style.display = 'none';
            
            currentVideoFile = file;
            const url = URL.createObjectURL(file);
            isVideoReady = false;
            videoPlayer.src = url;
            
            videoPlayer.load();
        }
        
        function togglePlayPause() {
            if (!isVideoReady) {
                alert('Video is still loading. Please wait...');
                return;
            }
            try {
                videoPlayer.paused ? videoPlayer.play() : videoPlayer.pause();
            } catch (error) {
                console.error('Play/Pause error:', error);
            }
        }
        
        function toggleMute() {
            isMuted = !isMuted;
            videoPlayer.muted = isMuted;
            volumeBtn.innerHTML = isMuted ? 
                '<i class="fas fa-volume-mute"></i>' : 
                '<i class="fas fa-volume-up"></i>';
        }
        
        function toggleFullscreen() {
            if (!document.fullscreenElement) {
                document.documentElement.requestFullscreen().catch(err => {
                    console.log(`Fullscreen error: ${err.message}`);
                });
                fullscreenBtn.innerHTML = '<i class="fas fa-compress"></i>';
            } else {
                document.exitFullscreen();
                fullscreenBtn.innerHTML = '<i class="fas fa-expand"></i>';
            }
        }
        
        function seek(e) {
            if (!videoPlayer.duration || !isVideoReady) return;
            const rect = progressBar.getBoundingClientRect();
            const percent = (e.clientX - rect.left) / rect.width;
            videoPlayer.currentTime = percent * videoPlayer.duration;
        }
        
        function addOption() {
            const optionCount = optionsContainer.querySelectorAll('.option-row').length;
            const optionRow = document.createElement('div');
            optionRow.className = 'option-row';
            optionRow.innerHTML = `
                <input type="text" placeholder="Option ${optionCount + 1}">
                <input type="checkbox" class="correct-option">
            `;
            optionsContainer.insertBefore(optionRow, addOptionBtn);
        }
        
        function toggleOptions() {
            optionsContainer.style.display = questionType.value === 'multiple' ? 'block' : 'none';
        }
        
        function addQuestion() {
            const timeString = questionTime.value.trim();
            const time = parseTime(timeString);
            const type = questionType.value;
            const text = questionText.value.trim();
            
            if (!text) {
                alert('Please enter question content');
                return;
            }
            if (isNaN(time) || time < 0) {
                alert('Please enter a valid timestamp');
                return;
            }
            
            let options = [];
            let correctAnswers = [];
            
            if (type === 'multiple') {
                const optionInputs = optionsContainer.querySelectorAll('.option-row input[type="text"]');
                const correctCheckboxes = optionsContainer.querySelectorAll('.correct-option');
                
                optionInputs.forEach((input, index) => {
                    if (input.value.trim()) {
                        options.push(input.value.trim());
                        if (correctCheckboxes[index].checked) {
                            correctAnswers.push(index);
                        }
                    }
                });
                
                if (options.length < 2) {
                    alert('Need at least two options');
                    return;
                }
                if (correctAnswers.length === 0) {
                    alert('Select at least one correct answer');
                    return;
                }
            }
            
            const question = {
                id: Date.now(),
                time: time,
                type: type,
                text: text,
                options: options,
                correctAnswers: correctAnswers,
                answered: false,
                userAnswer: '',
                isCorrect: false
            };
            
            questions.push(question);
            renderTimelineQuestions();
            renderMarkers();
            updateStats();
            
            questionText.value = '';
            questionTime.value = formatTime(videoPlayer.currentTime);
            
            const optionRows = optionsContainer.querySelectorAll('.option-row');
            optionRows.forEach((row, index) => {
                if (index > 1) row.remove();
                else {
                    row.querySelector('input[type="text"]').value = '';
                    row.querySelector('.correct-option').checked = false;
                }
            });
        }
        
        function finishAddingQuestions() {
            if (questions.length === 0) {
                alert('Please add at least one question');
                return;
            }
            questionForm.style.display = 'none';
            addMoreContainer.style.display = 'block';
            questionCheckEnabled = true;
            alert('Questions completed! Video will pause at timestamps.');
        }
        
        function addMoreQuestions() {
            questionForm.style.display = 'block';
            addMoreContainer.style.display = 'none';
        }
        
        function updateProgress() {
            if (videoPlayer.duration && !isNaN(videoPlayer.duration)) {
                const percent = (videoPlayer.currentTime / videoPlayer.duration) * 100;
                progress.style.width = `${percent}%`;
                updateTimeDisplay();
            }
        }
        
        function updateTimeDisplay() {
            if (videoPlayer.duration && !isNaN(videoPlayer.duration)) {
                const current = formatTime(videoPlayer.currentTime);
                const duration = formatTime(videoPlayer.duration);
                timeDisplay.textContent = `${current} / ${duration}`;
            } else {
                timeDisplay.textContent = '0:00 / 0:00';
            }
        }
        
        function formatTime(seconds) {
            if (isNaN(seconds)) return "0:00";
            const min = Math.floor(seconds / 60);
            const sec = Math.floor(seconds % 60);
            return `${min}:${sec < 10 ? '0' : ''}${sec}`;
        }
        
        function parseTime(timeString) {
            if (!timeString) return 0;
            const parts = timeString.split(':');
            if (parts.length === 1) {
                return parseInt(parts[0]) || 0;
            } else if (parts.length === 2) {
                const minutes = parseInt(parts[0]) || 0;
                const seconds = parseInt(parts[1]) || 0;
                return minutes * 60 + seconds;
            }
            return 0;
        }
        
        function renderTimelineQuestions() {
            timelineQuestionsList.innerHTML = '';
            if (questions.length === 0) {
                timelineQuestionsList.appendChild(noQuestions);
                noQuestions.style.display = 'block';
                timelineQuestionCount.textContent = '0';
                return;
            }
            noQuestions.style.display = 'none';
            timelineQuestionCount.textContent = questions.length;
            
            questions.sort((a, b) => a.time - b.time).forEach(question => {
                const timelineItem = document.createElement('div');
                timelineItem.className = `timeline-item ${question.answered ? 'answered-question' : ''}`;
                
                let optionsHtml = '';
                if (question.type === 'multiple') {
                    optionsHtml = '<div class="timeline-item-options">';
                    question.options.forEach((option, index) => {
                        const isCorrect = question.correctAnswers.includes(index);
                        const isUserAnswer = question.userAnswer === index.toString();
                        let answerIndicator = '';
                        if (question.answered) {
                            if (isCorrect && isUserAnswer) {
                                answerIndicator = '<i class="fas fa-check" style="color: var(--success-color);"></i> ✓ Correct';
                            } else if (isCorrect) {
                                answerIndicator = '<i class="fas fa-check" style="color: var(--success-color);"></i> Correct';
                            } else if (isUserAnswer) {
                                answerIndicator = '<i class="fas fa-times" style="color: var(--accent-color);"></i> Your answer';
                            }
                        } else if (isCorrect) {
                            answerIndicator = '<i class="fas fa-check" style="color: var(--success-color);"></i>';
                        }
                        optionsHtml += `<div>${String.fromCharCode(65 + index)}. ${option} ${answerIndicator}</div>`;
                    });
                    optionsHtml += '</div>';
                } else if (question.type === 'open' && question.answered) {
                    optionsHtml = `<div class="timeline-item-options"><strong>Your answer:</strong> ${question.userAnswer || 'No answer'}</div>`;
                }
                
                timelineItem.innerHTML = `
                    <div class="timeline-item-header">
                        <strong>${getQuestionTypeText(question.type)} ${question.answered ? '(Answered)' : ''}</strong>
                        <span class="timeline-item-time">${formatTime(question.time)}</span>
                    </div>
                    <div class="timeline-item-text">${question.text}</div>
                    ${optionsHtml}
                    <div class="timeline-item-actions">
                        <button class="btn btn-secondary btn-sm" onclick="seekToQuestion(${question.time})">
                            <i class="fas fa-play"></i> Jump to
                        </button>
                        ${!question.answered ? `
                        <button class="btn btn-secondary btn-sm" onclick="editQuestion(${question.id})">
                            <i class="fas fa-edit"></i> Edit
                        </button>
                        <button class="btn btn-danger btn-sm" onclick="deleteQuestion(${question.id})">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                        ` : ''}
                    </div>
                `;
                timelineQuestionsList.appendChild(timelineItem);
            });
        }
        
        function getQuestionTypeText(type) {
            switch(type) {
                case 'multiple': return 'Multiple Choice';
                case 'open': return 'Open-ended Question';
                case 'note': return 'Note';
                default: return type;
            }
        }
        
        function renderMarkers() {
            markers.innerHTML = '';
            if (!videoPlayer.duration) return;
            questions.forEach(question => {
                if (!question.answered) {
                    const marker = document.createElement('div');
                    marker.className = 'marker';
                    marker.style.left = `${(question.time / videoPlayer.duration) * 100}%`;
                    marker.setAttribute('data-title', question.text);
                    marker.addEventListener('click', () => {
                        videoPlayer.currentTime = question.time;
                        videoPlayer.play();
                    });
                    markers.appendChild(marker);
                }
            });
        }
        
        function showQuestion(question) {
            if (!question || question.answered) return;
            currentQuestion = question;
            popupQuestionText.textContent = question.text;
            popupTime.textContent = formatTime(question.time);
            popupOptions.innerHTML = '';
            
            if (question.type === 'multiple') {
                question.options.forEach((option, index) => {
                    const optionDiv = document.createElement('div');
                    optionDiv.className = 'option-row';
                    optionDiv.style.marginBottom = '10px';
                    optionDiv.style.display = 'flex';
                    optionDiv.style.alignItems = 'center';
                    optionDiv.innerHTML = `
                        <input type="radio" name="popupOption" id="option${index}" value="${index}" style="margin-right: 8px;">
                        <label for="option${index}" style="cursor: pointer; flex: 1;">
                            ${String.fromCharCode(65 + index)}. ${option}
                        </label>
                    `;
                    popupOptions.appendChild(optionDiv);
                });
                popupOptions.style.display = 'block';
                openAnswerContainer.style.display = 'none';
            } else if (question.type === 'open') {
                popupOptions.style.display = 'none';
                openAnswerContainer.style.display = 'block';
                openAnswer.value = '';
            } else {
                popupOptions.style.display = 'none';
                openAnswerContainer.style.display = 'none';
            }
            
            overlay.classList.add('active');
            questionPopup.classList.add('active');
        }
        
        function submitAnswer() {
            if (!currentQuestion) return;
            let userAnswer = '';
            if (currentQuestion.type === 'multiple') {
                const selected = document.querySelector('input[name="popupOption"]:checked');
                if (!selected) return alert('Please select an answer');
                userAnswer = selected.value;
            } else if (currentQuestion.type === 'open') {
                userAnswer = openAnswer.value.trim();
                if (!userAnswer) return alert('Please enter your answer');
            }
            currentQuestion.answered = true;
            currentQuestion.userAnswer = userAnswer;
            currentQuestion.isCorrect = true;
            renderTimelineQuestions();
            renderMarkers();
            updateStats();
            closeQuestionPopup();
        }
        
        function closeQuestionPopup() {
            overlay.classList.remove('active');
            questionPopup.classList.remove('active');
            currentQuestion = null;
            setTimeout(() => { questionCheckEnabled = true; }, 2000);
            if (videoPlayer.paused) {
                setTimeout(() => videoPlayer.play().catch(e => console.log('Play after question failed:', e)), 500);
            }
        }
        
        function continueVideo() {
            closeQuestionPopup();
        }
        
        function editQuestion(id) {
            const question = questions.find(q => q.id === id);
            if (!question) return;
            questionForm.style.display = 'block';
            addMoreContainer.style.display = 'none';
            videoPlayer.currentTime = question.time;
            questionTime.value = formatTime(question.time);
            questionType.value = question.type;
            questionText.value = question.text;
            const optionRows = optionsContainer.querySelectorAll('.option-row');
            optionRows.forEach(row => row.remove());
            if (question.type === 'multiple') {
                question.options.forEach((option, index) => {
                    addOption();
                    const newRow = optionsContainer.querySelectorAll('.option-row')[index];
                    newRow.querySelector('input[type="text"]').value = option;
                    if (question.correctAnswers.includes(index)) {
                        newRow.querySelector('.correct-option').checked = true;
                    }
                });
            }
            toggleOptions();
            deleteQuestion(id, false);
            questionForm.scrollIntoView({ behavior: 'smooth' });
        }
        
        function deleteQuestion(id, render = true) {
            questions = questions.filter(q => q.id !== id);
            if (render) {
                renderTimelineQuestions();
                renderMarkers();
                updateStats();
            }
        }
        
        function updateStats() {
            totalQuestions.textContent = questions.length;
            timelineQuestionCount.textContent = questions.length;
            if (videoPlayer.duration && !isNaN(videoPlayer.duration)) {
                videoDuration.textContent = formatTime(videoPlayer.duration);
            }
        }
        
        async function saveProject() {
            if (questions.length === 0) {
                alert('Add some questions before saving');
                return;
            }
            if (!currentVideoFile) {
                alert('Upload a video first');
                return;
            }
            const projectData = {
                questions: questions.map(q => ({
                    id: q.id || Date.now(),
                    time: Number(q.time),
                    type: q.type,
                    text: q.text,
                    options: q.options || [],
                    correctAnswers: q.correctAnswers || [],
                    answered: Boolean(q.answered),
                    userAnswer: q.userAnswer || '',
                    isCorrect: Boolean(q.isCorrect)
                })),
                videoFileName: currentVideoFile.name,
                timestamp: new Date().toISOString(),
                version: '2.0'
            };
            try {
                const zip = new JSZip();
                zip.file("project.json", JSON.stringify(projectData, null, 2));
                zip.file(currentVideoFile.name, currentVideoFile);
                const content = await zip.generateAsync({type: "blob"});
                saveAs(content, `interactive-video-project-${Date.now()}.zip`);
                alert(`✅ Saved!\nTotal: ${questions.length}, Unanswered: ${questions.filter(q => !q.answered).length}`);
            } catch (error) {
                console.error('❌ Save error:', error);
                alert('Error: ' + error.message);
            }
        }
        
        async function loadFromZip(file) {
            try {
                const zip = await JSZip.loadAsync(file);
                const projectFile = zip.file("project.json");
                if (!projectFile) throw new Error("Project data missing");
                const projectData = JSON.parse(await projectFile.async("text"));
                const videoFileName = projectData.videoFileName;
                const videoFile = zip.file(videoFileName);
                if (!videoFile) throw new Error("Video file missing");
                const videoBlob = await videoFile.async("blob");
                const videoUrl = URL.createObjectURL(videoBlob);
                
                questions = [];
                currentQuestion = null;
                lastTriggeredQuestionId = null;
                questionCheckEnabled = true;
                isVideoReady = false;
                
                videoPlayer.src = videoUrl;
                uploadArea.style.display = 'none';
                videoLoading.style.display = 'block';
                
                await new Promise((resolve) => {
                    videoPlayer.addEventListener('loadedmetadata', resolve, { once: true });
                });
                
                questions = projectData.questions.map(q => ({
                    id: q.id || Date.now(),
                    time: Number(q.time),
                    type: q.type,
                    text: q.text,
                    options: Array.isArray(q.options) ? q.options : [],
                    correctAnswers: Array.isArray(q.correctAnswers) ? q.correctAnswers : [],
                    answered: Boolean(q.answered),
                    userAnswer: q.userAnswer || '',
                    isCorrect: Boolean(q.isCorrect)
                }));
                
                renderTimelineQuestions();
                renderMarkers();
                updateStats();
                currentVideoFile = new File([videoBlob], videoFileName, { type: videoBlob.type });
                
                alert(`✅ Loaded!\nTotal: ${questions.length}, Unanswered: ${questions.filter(q => !q.answered).length}`);
                loadProjectFile.value = '';
                openSettings();
            } catch (error) {
                console.error('❌ Load error:', error);
                alert('Load failed: ' + error.message);
            }
        }
        
        function loadProject(e) {
            const file = e.target.files[0];
            if (!file) return;
            if (file.name.endsWith('.zip')) {
                loadFromZip(file);
            } else if (file.name.endsWith('.json')) {
                alert('JSON mode requires separate video upload.');
            } else {
                alert('Invalid file type');
            }
        }

        window.seekToQuestion = function(time) {
            if (!isVideoReady) return;
            videoPlayer.currentTime = time;
            videoPlayer.play();
        };

        window.editQuestion = editQuestion;
        window.deleteQuestion = deleteQuestion;

        window.debugQuestionDetection = function() {
            console.log('=== DEBUG ===');
            console.log('Current time:', videoPlayer.currentTime.toFixed(2));
            console.log('Questions:', questions.map(q => ({ time: q.time, answered: q.answered })));
            console.log('Detection enabled:', questionCheckEnabled);
        };

        window.onload = init;
    </script>
</body>
</html>
